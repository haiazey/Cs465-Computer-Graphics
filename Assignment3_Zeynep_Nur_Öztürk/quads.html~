<!DOCTYPE html>
<html>

<script type="text/javascript" src="../Assignment3_Zeynep_Nur_Öztürk/Common/webgl-utils.js"></script>
<script type="text/javascript" src="../Assignment3_Zeynep_Nur_Öztürk/Common/initShaders.js"></script>
<script type="text/javascript" src="../Assignment3_Zeynep_Nur_Öztürk/Common/MV.js"></script>
<script type="text/javascript" src="quads.js"></script>

<!--Those parts directly taken from our Book's codes (shadedSphere1.html)-->
<script id="vertex-shader-Gouraud" type="x-shader/x-vertex">

attribute vec4 vPosition;
attribute vec4 vNormal;
attribute vec4 vColor;
attribute vec2 vTexCoord;
varying vec2 fTexCoord;

varying vec4 fColor;
varying vec3 R;

uniform vec4 ambientProduct, diffuseProduct, specularProduct;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform vec4 lightPosition;
uniform float shininess;
uniform mat3 normalMatrix;

void main(){
    
    gl_PointSize = 5.0;
    
    vec3 pos = (modelViewMatrix * vPosition).xyz;
    vec3 L;
    
    if(lightPosition.w == 0.0) 
    	L = normalize(lightPosition.xyz);
    else 
    	L = normalize( lightPosition.xyz - pos );

    vec3 E = -normalize( pos );
    // halfway
    vec3 H = normalize( L + E );
	vec3 N = normalize((modelViewMatrix*vNormal).xyz);
	vec4 ambient = ambientProduct;
	float Kd = max( dot(L, N), 0.0 );
    vec4  diffuse = Kd*diffuseProduct;
	float Ks = pow( max(dot(N, H), 0.0), shininess );
    vec4  specular = Ks * specularProduct;
    
    if( dot(L, N) < 0.0 ) 
		specular = vec4(0.0, 0.0, 0.0, 1.0);
    
    gl_Position = projectionMatrix * modelViewMatrix * vPosition;
    
    fColor = ambient + diffuse +specular;
    fColor.a = 1.0;
	fTexCoord = vTexCoord;
	R = reflect(pos, N);
}

</script>
<script id="fragment-shader-Gouraud" type="x-shader/x-fragment">

precision mediump float;
varying vec4 fColor;
varying vec3 R;
varying  vec2 fTexCoord;
uniform sampler2D texture;
uniform samplerCube texMap;

void main(){
	gl_FragColor = fColor*texture2D( texture, fTexCoord );
}

</script>

<script id="vertex-shader-Phong" type="x-shader/x-vertex">

attribute vec4 vPosition;
attribute vec4 vNormal;
attribute vec2 vTexCoord;
varying vec3 N, L, E;
varying vec3 R;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform vec4 lightPosition;
uniform mat3 normalMatrix;
varying vec2 fTexCoord;

void main(){
    vec3 pos = (modelViewMatrix * vPosition).xyz;
    if(lightPosition.w == 0.0) L = normalize(lightPosition.xyz);
    else L = normalize( lightPosition.xyz - pos );
    
    E =  -normalize(pos);
    N = normalize((modelViewMatrix*vNormal).xyz);

    gl_Position = projectionMatrix * modelViewMatrix * vPosition;
	R = reflect(pos, N);
	fTexCoord = vTexCoord;
}
</script>

<script id="fragment-shader-Phong" type="x-shader/x-fragment">

precision mediump float;

uniform vec4 ambientProduct;
uniform vec4 diffuseProduct;
uniform vec4 specularProduct;
uniform float shininess;
varying vec3 N, L, E;
varying vec3 R;
varying  vec2 fTexCoord;

uniform sampler2D texture;
uniform samplerCube texMap;

void main(){    
    vec4 fColor;
    vec3 H = normalize( L + E );
    vec4 ambient = ambientProduct;
	float Kd = max( dot(L, N), 0.0 );
    vec4  diffuse = Kd*diffuseProduct;

    float Ks = pow( max(dot(N, H), 0.0), shininess );
    vec4  specular = Ks * specularProduct;
    
    if( dot(L, N) < 0.0 ) 
    	specular = vec4(0.0, 0.0, 0.0, 1.0);

    fColor = ambient + diffuse +specular;
    fColor.a = 1.0;
	
    gl_FragColor = fColor*texture2D( texture, fTexCoord );
}
</script>

<script id="vertex-shader-Environment-Mapping" type="x-shader/x-vertex">

attribute vec4 vPosition;
attribute vec4 vNormal;
attribute vec2 vTexCoord;
varying vec3 N, L, E;
varying vec3 R;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform vec4 lightPosition;
uniform mat3 normalMatrix;
varying vec2 fTexCoord;

void main()
{
    vec3 pos = (modelViewMatrix * vPosition).xyz;
    
    if(lightPosition.w == 0.0) 
    	L = normalize(lightPosition.xyz);
    else 
    	L = normalize( lightPosition.xyz - pos );
    
    E =  -normalize(pos);
    N = normalize((modelViewMatrix*vNormal).xyz);

    gl_Position = projectionMatrix * modelViewMatrix * vPosition;
	
	R = reflect(pos, N);
	fTexCoord = vTexCoord;
    
}
</script>

<script id="fragment-shader-Environment-Mapping" type="x-shader/x-fragment">

precision mediump float;

uniform vec4 ambientProduct;
uniform vec4 diffuseProduct;
uniform vec4 specularProduct;
uniform float shininess;
varying vec3 N, L, E;
varying vec3 R;
varying  vec2 fTexCoord;

uniform sampler2D texture;
uniform samplerCube texMap;

void main(){    
    vec4 fColor;
    vec3 H = normalize( L + E );
    vec4 ambient = ambientProduct;
	vec4 texColor = textureCube(texMap, R);
    float Kd = max( dot(L, N), 0.0 );
    vec4  diffuse = Kd*diffuseProduct;
    float Ks = pow( max(dot(N, H), 0.0), shininess );
    vec4  specular = Ks * specularProduct;
   
    if( dot(L, N) < 0.0 ) 
    	specular = vec4(0.0, 0.0, 0.0, 1.0);

    fColor = ambient + diffuse +specular;
    fColor.a = 1.0;
	
	gl_FragColor = texColor;
}
</script>

<div>
exponent 1 = 1.8<input id="slider0" type="range" min="1.8" max="3.0" value="0.2" step="0.1"/>3.0 <br/>
exponent 2 = 0.5<input id="slider1" type="range" min="0.5" max="4.0" value="0.2" step="0.1"/>4.0 <br/>
Bound X = 0.5<input id="slider6" type="range" min="0.5" max="4" value="1" step="0.5"/>4 <br/>
Bound Y = 0.5<input id="slider7" type="range" min="0.5" max="4" value="1" step="0.5"/>4 <br/>
Bound Z = 0.5<input id="slider8" type="range" min="0.5" max="4" value="1" step="0.5"/>4 <br/>

<button id= "wireFrameChange">WireFrame/Shaded</button> <br/>
<button id= "gouraud">Gouraud/Phong</button> <br/>
<button id= "shapeChange">Toroid/Hyperboloid</button> <br/>
<button id= "environmentMapping">Environment Mapping</button> <br/>
<div/>		

<body>
<canvas id="gl-canvas" width="512" height="512">
Oops ... your browser doesn't support the HTML5 canvas element
</canvas>
</body>



</html>
